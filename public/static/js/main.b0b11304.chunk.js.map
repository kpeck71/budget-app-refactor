{"version":3,"sources":["components/List.js","components/NewListForm.js","components/EditListForm.js","components/ListContainer.js","App.js","serviceWorker.js","index.js"],"names":["List","_ref","list","_ref$onRemoveList","onRemoveList","f","_ref$editingList","editingList","react_default","a","createElement","className","key","id","title","excerpt","onClick","NewListForm","_ref$onNewList","onNewList","onSubmit","e","preventDefault","value","focus","ref","input","type","placeholder","required","EditListForm","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleChange","setState","defineProperty","target","name","state","bind","assertThisInitialized","handleSubmit","_this$state","editList","onChange","Component","ListsContainer","lists","editingListId","addNewList","removeList","_this2","axios","get","then","response","console","log","data","catch","error","_this3","post","toConsumableArray","concat","_this4","delete","filter","_this5","put","_this6","map","components_EditListForm","components_List","components_NewListForm","App","ListContainer","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.b0b11304.chunk.js","sourcesContent":["import React from 'react'\n\nconst List = ({list, onRemoveList=f=>f, editingList=f=>f}) =>\n\n  <div className=\"single-list\" key={list.id}>\n    <h4>#{list.id} - {list.title}</h4>\n    <p>{list.excerpt}</p>\n    <button onClick={()=> onRemoveList(list.id)}>Erase</button>\n    <button onClick={()=> editingList(list.id)}>Edit</button>\n    <hr/>\n  </div>\n\nexport default List;\n","import React from 'react';\n\nconst NewListForm = ({onNewList = f => f}) => {\n  let title, excerpt\n  const submit = e => {\n      e.preventDefault()\n      onNewList(title.value, excerpt.value)\n      title.value = ''\n      excerpt.value = ''\n      title.focus()\n  }\n\n  return (\n    <form onSubmit={submit}>\n      <input  ref={input => title = input}\n              type=\"text\"\n              placeholder=\"Title...\" required />\n      <input  ref={input => excerpt = input}\n              type=\"text\"\n              placeholder=\"Excerpt...\" required />\n      <button>Add List</button>\n    </form>\n  )\n}\n\nexport default NewListForm;\n","import React, { Component } from 'react';\n\nclass EditListForm extends Component {\n    constructor(props) {\n        super(props)\n        this.state = {\n            id: this.props.list.id,\n            title: this.props.list.title,\n            excerpt: this.props.list.excerpt\n        }\n        this.handleChange = this.handleChange.bind(this)\n        this.handleSubmit = this.handleSubmit.bind(this)\n    }\n    handleChange = (e) => {\n        this.setState({[e.target.name]: e.target.value})\n    }\n    handleSubmit(e){\n        e.preventDefault();\n        const { id, title, excerpt } = this.state;\n        this.props.editList(id, title, excerpt);\n    }\n    render(){\n        return(\n            <form onSubmit={this.handleSubmit}>\n            <input  name=\"title\"\n                    type=\"text\"\n                    placeholder=\"Title...\"\n                    value={this.state.title}\n                    onChange={this.handleChange} />\n            <input  name=\"excerpt\"\n                    type=\"text\"\n                    placeholder=\"Excerpt...\"\n                    value={this.state.excerpt}\n                    onChange={this.handleChange} />\n            <button>Update List</button>\n        </form>\n        )\n    }\n}\nexport default EditListForm;\n","import React, { Component } from 'react';\nimport axios from 'axios'\nimport List from './List'\nimport NewListForm from './NewListForm'\nimport EditListForm from './EditListForm'\n\nclass ListsContainer extends Component {\n  constructor(props) {\n    super(props)\n    this.state = {\n      lists: [],\n      editingListId: null\n    }\n    this.addNewList = this.addNewList.bind(this)\n    this.removeList = this.removeList.bind(this)\n    this.editingList = this.editingList.bind(this)\n    this.editList = this.editList.bind(this)\n  }\n\n  componentDidMount() {\n    axios.get('http://localhost:3001/api/v1/lists.json')\n    .then(response => {\n      console.log(response)\n      this.setState({\n        lists: response.data\n      })\n    })\n    .catch(error => console.log(error))\n  }\n\n  addNewList(title, excerpt) {\n     axios.post( '/api/v1/lists', { list: {title, excerpt} })\n     .then(response => {\n         console.log(response)\n         const lists = [ ...this.state.lists, response.data ]\n         this.setState({lists})\n     })\n     .catch(error => {\n         console.log(error)\n     })\n   }\n\n   removeList(id) {\n      axios.delete( '/api/v1/lists/' + id )\n      .then(response => {\n          const lists = this.state.lists.filter(\n              list => list.id !== id\n          )\n          this.setState({lists})\n      })\n      .catch(error => console.log(error))\n    }\n\n    editingList(id) {\n      this.setState({\n        editingListId: id\n      })\n    }\n\n    editList(id, title, excerpt) {\n      axios.put( '/api/v1/lists/' + id, {\n          list: {\n              title,\n              excerpt\n          }\n      })\n      .then(response => {\n          console.log(response);\n          const lists = this.state.lists;\n          lists[id-1] = {id, title, excerpt}\n          this.setState(() => ({\n              lists,\n              editingListId: null\n          }))\n      })\n      .catch(error => console.log(error));\n    }\n\n  render() {\n    return (\n      <div className=\"lists-container\">\n        Lists:\n        {this.state.lists.map( list => {\n          if (this.state.editingListId === list.id ) {\n            return (<EditListForm\n                      list={list}\n                      key={list.id}\n                      editList={this.editList}\n                    />)\n          } else {\n          return (<List\n                    list={list}\n                    key={list.id}\n                    onRemoveList={this.removeList}\n                    editingList={this.editingList}\n                    /> )\n          }\n        })}\n        <NewListForm onNewList={this.addNewList} />\n      </div>\n      )\n    }\n  }\n\nexport default ListsContainer;\n","import React, { Component } from 'react';\nimport './App.css';\nimport ListContainer from './components/ListContainer';\n\nclass App extends Component {\n  render() {\n    return (\n      <div className=\"App\">\n        <header className=\"App-header\">\n          <h1 className=\"App-title\">Hello Hiplyst!</h1>\n        </header>\n        <ListContainer />\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}